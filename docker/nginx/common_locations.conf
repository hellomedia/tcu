location / {
    # matches everything but only kicks in if a higher priority match does not exist
    # try to serve file directly, fallback to rewrite
    try_files $uri @rewriteapp;
}
location @rewriteapp {
    # rewrite all to index.php
    rewrite ^(.*)$ /index.php/ last;
}
location ^~ /media/cache/resolve {
    # forward match -- higher priority than regex matches below
    # in this case we don't want to cache the response (302 redirect)
    # which would bypass image generation next time cache is cleared
    try_files $uri @rewriteapp;
}
location ~ ^/media/cache {
    # regex match - case sensitive
    expires 1y;
}

# !!! ASSET MAPPER : MUST COMMENT THIS DIRECTIVE IN DEV !!!
#
# Direct File Serving Without Rewrites: When you set up a location block for specific file types like \.(js|css|png|...),
# Nginx tries to serve these files directly from the filesystem within that location block.
# If a matching file is found, Nginx will serve it without any further rewrites or fallback to other locations
# (like those handled by Symfony’s routing or asset mapper). This means that Nginx won’t look to Symfony
# for additional logic if the file is located in the expected path.

# Bypassing Symfony's Asset Mapper: In your case, this means that if a requested asset (e.g., style.css)
# doesn’t exist in the public directory but has an entry in Symfony’s asset mapper, Nginx will still try
# to serve it directly from the location block. When the file isn’t present, it returns a 404, rather than
# letting Symfony dynamically map or rewrite it to the actual asset location.

# !!! BUT SHOULD BE USED IN PRODUCTION !!!
# after running asset-map:compile to publish the assets in their location in public/assets

# location ~* \.(js|css|png|jpg|jpeg|gif|webp|ico|eot|svg|ttf|woff)$ {
#     # regex match - case insensitive
#     expires 1y;
# }
